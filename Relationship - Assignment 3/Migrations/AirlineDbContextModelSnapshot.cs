// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Relationship___Assignment_3.DataBaseContext;

#nullable disable

namespace Relationship___Assignment_3.Migrations
{
    [DbContext(typeof(AirlineDbContext))]
    partial class AirlineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Relationship___Assignment_3.Models.AirLinePhones", b =>
                {
                    b.Property<int>("AirlineID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("AirlineID", "PhoneNumber");

                    b.ToTable("AirLinePhones", null, t =>
                        {
                            t.HasCheckConstraint("CK_AirLinePhones_Format", "LEN([PhoneNumber]) <=11 AND [PhoneNumber] LIKE '01%'");
                        });
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 10L, 10);

                    b.Property<int>("AirlineID")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AirlineID");

                    b.ToTable("Aircrafts", null, t =>
                        {
                            t.HasCheckConstraint("CK_Aircraft_Capacity", "[Capacity] > 0 AND [Capacity] <= 250");
                        });
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.AircraftRoute", b =>
                {
                    b.Property<int>("Aircraft_Id")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Arrival")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Departure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Duration")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("NumberOfPassenger")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Aircraft_Id", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("AircraftRoute", null, t =>
                        {
                            t.HasCheckConstraint("CK_AircraftRoutes_Duration_Positive", "[Duration] > 0");

                            t.HasCheckConstraint("CK_AircraftRoutes_NumPassengers", "[NumberOfPassenger] >= 0 AND [NumberOfPassenger] <= 250");
                        });
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Airline", b =>
                {
                    b.Property<int>("AirlineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AirLine_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirlineID"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AirlineName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Contact_person");

                    b.HasKey("AirlineID");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"));

                    b.Property<int>("AirlineID")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("BirthDay");

                    b.Property<string>("EmpAddress")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("EmployeeName");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("BirthMonth");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("BirthYear");

                    b.HasKey("EmpId");

                    b.HasIndex("AirlineID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.EmployeeQualifications", b =>
                {
                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmpId")
                        .HasColumnType("int");

                    b.HasKey("Qualification", "EmpId");

                    b.HasIndex("EmpId");

                    b.ToTable("EmployeeQualifications", (string)null);
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RouteId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteId"));

                    b.Property<string>("Classification")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Distance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distination")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Orgin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Transaction_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AirlineID")
                        .HasColumnType("int");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("TransactionDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AirlineID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.AirLinePhones", b =>
                {
                    b.HasOne("Relationship___Assignment_3.Models.Airline", "Airline")
                        .WithMany("AirLinePhones")
                        .HasForeignKey("AirlineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Aircraft", b =>
                {
                    b.HasOne("Relationship___Assignment_3.Models.Airline", "Airline")
                        .WithMany("Aircraft")
                        .HasForeignKey("AirlineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Relationship___Assignment_3.Models.Crew", "Crew", b1 =>
                        {
                            b1.Property<int>("AircraftId")
                                .HasColumnType("int");

                            b1.Property<string>("AssistantPilot")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AssistantPilot");

                            b1.Property<string>("Host1")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Host1");

                            b1.Property<string>("Host2")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Host2");

                            b1.Property<string>("MajorPilot")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MajorPilot");

                            b1.HasKey("AircraftId");

                            b1.ToTable("Aircrafts");

                            b1.WithOwner()
                                .HasForeignKey("AircraftId");
                        });

                    b.Navigation("Airline");

                    b.Navigation("Crew")
                        .IsRequired();
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.AircraftRoute", b =>
                {
                    b.HasOne("Relationship___Assignment_3.Models.Aircraft", "Aircraft")
                        .WithMany("AircraftRoutes")
                        .HasForeignKey("Aircraft_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Relationship___Assignment_3.Models.Route", "Route")
                        .WithMany("AircraftRoutes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Employee", b =>
                {
                    b.HasOne("Relationship___Assignment_3.Models.Airline", "Airline")
                        .WithMany("Employees")
                        .HasForeignKey("AirlineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.EmployeeQualifications", b =>
                {
                    b.HasOne("Relationship___Assignment_3.Models.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Transaction", b =>
                {
                    b.HasOne("Relationship___Assignment_3.Models.Airline", "Airline")
                        .WithMany("Transactions")
                        .HasForeignKey("AirlineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Aircraft", b =>
                {
                    b.Navigation("AircraftRoutes");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Airline", b =>
                {
                    b.Navigation("AirLinePhones");

                    b.Navigation("Aircraft");

                    b.Navigation("Employees");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Employee", b =>
                {
                    b.Navigation("EmployeeQualifications");
                });

            modelBuilder.Entity("Relationship___Assignment_3.Models.Route", b =>
                {
                    b.Navigation("AircraftRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
